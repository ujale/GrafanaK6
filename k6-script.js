// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import "./libs/shim/expect.js";
import "./libs/shim/urijs.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  environment: {
    server: "https://qa-api.upkip.live",
    phone_number: "",
    transactionurl: "https://qa.upkip.live/kippa-transaction",
    bizId: "",
    usertoken: "",
    userId: "",
    resettoken: "",
    txnId: "",
    phone_numb: "",
    bizId2: "",
    vasurl: "https://qa.upkip.live/kippa-vas",
    kippapayurl: "https://paymentms-qa.upkip.live",
    walleturl: "https://qa.upkip.live/kippa-wallet",
    virtualaccno: "",
    paymentlink: "",
    walletbalance: "",
    existinguserbizid: "6664aefc-0c1e-45af-bf6a-42ee901210bf",
    existingusertoken: "",
    existinguserId: "",
    csadmintoken: "",
    csadminId: "",
    existingusertoken2: "",
    existingusertoken3: "",
    existinguserId3: ""
  }
});

export default function() {
  postman[Request]({
    name: "Admin Login Copy",
    id: "28008f32-cbcf-4ab6-a1bd-3a75b8ecb8f9",
    method: "POST",
    address: "{{server}}/v1/admin/login",
    data: '{\n    "secret":"123456"\n}',
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });

      //Set access token as environment variable
      var body = JSON.parse(responseBody);
      pm.environment.set("csadmintoken", body.data.token);

      pm.test("Login successful", function() {
        pm.expect(body.message).to.eql("Operation Successful");
      });

      //Set person id as environment variable
      var body = JSON.parse(responseBody);
      pm.environment.set("csadminId", body.data.id);

      pm.test("Response time is less than 1500ms", function() {
        pm.expect(pm.response.responseTime).to.be.below(1500);
      });
    }
  });

  postman[Request]({
    name: "Get Users Copy",
    id: "05cf1715-5508-4aec-bd27-d8268cb2e415",
    method: "GET",
    address: "{{server}}/v1/admin/users",
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });

      var body = JSON.parse(responseBody);
      pm.test("Login successful", function() {
        pm.expect(body.message).to.eql("Operation Successful");
      });

      pm.test("Response time is less than 1500ms", function() {
        pm.expect(pm.response.responseTime).to.be.below(1500);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("csadmintoken")}`;
    }
  });

  postman[Request]({
    name: "Get Verified Users Copy",
    id: "3239fb63-0f5a-4d40-83fd-dabd30cc5667",
    method: "GET",
    address: "{{server}}/v1/admin/users?verified=true&page=0",
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });

      var body = JSON.parse(responseBody);
      pm.test("Login successful", function() {
        pm.expect(body.message).to.eql("Operation Successful");
      });

      pm.test("Response time is less than 1500ms", function() {
        pm.expect(pm.response.responseTime).to.be.below(1500);
      });

      //pm.test("verifiedusercount", function () {
      //    pm.expect(body.data.total).to.eql(159);
      //});
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("csadmintoken")}`;
    }
  });

  postman[Request]({
    name: "Get Unverified Users Copy",
    id: "4810ba30-3659-44a7-8bbe-33a162edc007",
    method: "GET",
    address: "{{server}}/v1/admin/users?verified=false&page=0",
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });

      var body = JSON.parse(responseBody);
      pm.test("Login successful", function() {
        pm.expect(body.message).to.eql("Operation Successful");
      });

      pm.test("Response time is less than 1500ms", function() {
        pm.expect(pm.response.responseTime).to.be.below(1500);
      });

      pm.test("unverifiedusercount", function() {
        pm.expect(body.data.total).to.eql(5);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("csadmintoken")}`;
    }
  });
}
